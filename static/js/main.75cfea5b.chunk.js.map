{"version":3,"sources":["components/CovidData/Shared/DataTable.module.css","app/api/api.js","components/Helpers/humanizeNumber.helper.js","components/CovidData/Shared/DataCard.component.js","components/CovidData/Shared/Date.component.js","components/CovidData/World/WorldData.component.js","components/Helpers/timestampToDate.helper.js","components/CovidData/Continents/Continent/ContinentData.component.js","components/Hooks/useSortableData.hook.js","components/CovidData/Continents/ContinentsDataTable.component.js","components/CovidData/Continents/ContinentsData.component.js","app/routing/Continents.router.js","components/CovidData/Countries/CountriesDataTable.component.js","components/CovidData/Countries/CountriesData.component.js","components/CovidData/Countries/Country/CountryData.component.js","app/routing/Countries.router.js","app/routing/Data.router.js","app/routing/Main.router.js","components/NavBar/NavBar.component.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","getWorldData","a","axios","get","getCountryData","country","getCountriesData","getContinentsData","getContinentData","continent","humanizeNumber","number","strNumberParts","toString","split","strNumber","reverse","join","rest","undefined","result","length","push","substr","DataCard","props","header","data","Card","className","Body","Header","as","Text","Table","hover","map","action","name","style","textAlign","value","Date","date","WorldData","timestamp","useAsync","error","loading","alert","message","Row","Col","todayCases","cases","casesPerOneMillion","todayDeaths","deaths","deathsPerOneMillion","todayRecovered","recovered","recoveredPerOneMillion","updated","Intl","DateTimeFormat","year","month","day","hour","minute","format","ContinentData","history","useHistory","id","useParams","Button","variant","onClick","goBack","population","shouldNotHumanize","active","critical","require","useState","useMemo","useSortableData","items","config","sortConfig","setSortConfig","sortedItems","sortableItems","sort","b","key","direction","requestSort","ContinentsDataTable","striped","bordered","styles","datatable","element","idx","handleClick","tests","ContinentsData","location","pathname","encodeURIComponent","ContinentsRouter","exact","path","component","CountriesDataTable","width","height","src","countryInfo","flag","alt","CountriesData","CountryData","CountriesRouter","DataRouter","MainRouter","NavBar","Navbar","bg","expand","sticky","Toggle","aria-controls","Collapse","Nav","to","App","Container","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.75cfea5b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"datatable\":\"DataTable_datatable__2ejzb\"};","import axios from 'axios';\r\n\r\nexport const getWorldData = async () => {\r\n    try {\r\n        return await axios.get('https://disease.sh/v3/covid-19/all?yesterday=true');\r\n    } catch (err) {\r\n        return err;\r\n    }\r\n};\r\n\r\nexport const getCountryData = async (country) => {\r\n    try {\r\n        return await axios.get(`https://disease.sh/v3/covid-19/countries/${country}`);\r\n    } catch (err) {\r\n        return err;\r\n    }\r\n};\r\n\r\nexport const getCountriesData = async () => {\r\n    try {\r\n        return await axios.get('https://disease.sh/v3/covid-19/countries?yesterday=true');\r\n    } catch (err) {\r\n        return err;\r\n    }\r\n};\r\n\r\nexport const getContinentsData = async () => {\r\n    try {\r\n        return await axios.get('https://disease.sh/v3/covid-19/continents?yesterday=true');\r\n    } catch (err) {\r\n        return err;\r\n    }\r\n};\r\n\r\nexport const getContinentData = async (continent) => {\r\n    try {\r\n        return await axios.get(`https://disease.sh/v3/covid-19/continents/${continent}`);\r\n    } catch (err) {\r\n        return err;\r\n    }\r\n};","export function humanizeNumber(number) {\r\n    var strNumberParts = number.toString().split('.');\r\n\r\n    var strNumber = strNumberParts[0].split('').reverse().join('');\r\n    var rest = strNumberParts[1] === undefined ? '' : '.' + strNumberParts[1];\r\n\r\n    var result = [];\r\n    while (strNumber.length) {\r\n        result.push(strNumber.substr(0, 3) + ' ');\r\n        strNumber = strNumber.substr(3);\r\n    }\r\n\r\n    return result.join('').split('').reverse().join('') + rest;\r\n}","import React from 'react';\r\nimport { Card, Table } from 'react-bootstrap';\r\nimport { humanizeNumber } from '../../Helpers/humanizeNumber.helper';\r\n\r\nexport function DataCard(props) {\r\n    const { header, data } = props;\r\n    return (\r\n        <>\r\n            <Card className=\"border-white\">\r\n                <Card.Body>\r\n                    <Card.Header as=\"h5\">\r\n                        {header}\r\n                    </Card.Header>\r\n                    <Card.Text>\r\n                        <Table hover>\r\n                            <tbody>\r\n                                {data && data.map(action => (\r\n                                    <tr>\r\n                                        <td>{action.name}</td>\r\n                                        <td style={{ textAlign: 'right' }}>{typeof action.value === 'string' ? action.value : humanizeNumber(action.value)}</td>\r\n                                    </tr>\r\n                                ))}\r\n                            </tbody>\r\n                        </Table>\r\n                    </Card.Text>\r\n                </Card.Body>\r\n            </Card>\r\n        </>\r\n    );\r\n}","import React from 'react';\r\n\r\nexport function Date(props) {\r\n    return (\r\n        <>\r\n            <p>{props.date}</p>\r\n        </>\r\n    );\r\n}","import React from 'react';\r\nimport { useAsync } from 'react-async-hook';\r\nimport { Col, Row } from 'react-bootstrap';\r\nimport { getWorldData } from '../../../app/api/api';\r\nimport { timestampToDate } from '../../Helpers/timestampToDate.helper';\r\nimport { DataCard } from '../Shared/DataCard.component';\r\nimport { Date } from '../Shared/Date.component';\r\n\r\nexport function WorldData() {\r\n    const { result, error, loading } = useAsync(getWorldData, []);\r\n\r\n    if (!result) {\r\n        return <></>\r\n    }\r\n    return (\r\n        <>\r\n            {loading && <p>Loading...</p>}\r\n            {error && alert(error.message)}\r\n            {result &&\r\n                <>\r\n                    <Row>\r\n                        <Col>\r\n                            <DataCard header=\"Cases\" data={[{ name: 'Today', value: result.data.todayCases }, { name: 'Total', value: result.data.cases }, { name: 'Per one million', value: result.data.casesPerOneMillion }]}/>\r\n                        </Col>\r\n                        <Col>\r\n                            <DataCard header=\"Deaths\" data={[{ name: 'Today', value: result.data.todayDeaths }, { name: 'Total', value: result.data.deaths }, { name: 'Per one million', value: result.data.deathsPerOneMillion }]}/>\r\n                        </Col>\r\n                        <Col>\r\n                            <DataCard header=\"Recovered\" data={[{ name: 'Today', value: result.data.todayRecovered }, { name: 'Total', value: result.data.recovered }, { name: 'Per one million', value: result.data.recoveredPerOneMillion }]}/>\r\n                        </Col>\r\n                    </Row>\r\n\r\n                    <Date date={timestampToDate(result.data.updated)}></Date>\r\n                </>\r\n            }\r\n        </>\r\n    );\r\n}","export function timestampToDate(timestamp) {\r\n    return Intl.DateTimeFormat('en-US', {\r\n        year: \"numeric\",\r\n        month: \"short\",\r\n        day: \"2-digit\",\r\n        hour: \"numeric\",\r\n        minute: \"2-digit\",\r\n    }).format(timestamp);\r\n}","import React from 'react';\r\nimport { useAsync } from 'react-async-hook';\r\nimport { Button, Col, Row } from 'react-bootstrap';\r\nimport { useHistory, useParams } from 'react-router-dom';\r\nimport { getContinentData } from '../../../../app/api/api';\r\nimport { DataCard } from '../../Shared/DataCard.component';\r\n \r\nexport function ContinentData(){\r\n    const history = useHistory();\r\n    const id = useParams();\r\n\r\n    const { result, error, loading } = useAsync(getContinentData, [id.name]);\r\n\r\n    if (!result) {\r\n        return <></>\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {loading && <p>Loading...</p>}\r\n            {error && alert(error.message)}\r\n            {result &&\r\n            <>\r\n                <Button variant=\"light\" onClick={() => history.goBack()}>Back</Button>\r\n                <Row>\r\n                    <Col>\r\n                        <DataCard header=\"Info\" data={[{ name: 'Name', value: result.data.continent }, { name: 'Population', value: result.data.population, shouldNotHumanize: true }]} />\r\n                    </Col>\r\n                    <Col>\r\n                        <DataCard header=\"Now\" data={[{ name: 'Active', value: result.data.active }, { name: 'Critical', value: result.data.critical }]} />\r\n                    </Col>\r\n                </Row>\r\n                \r\n                <Row>\r\n                    <Col>\r\n                        <DataCard header=\"Cases\" data={[{ name: 'Today', value: result.data.todayCases }, { name: 'Total', value: result.data.cases }, { name: 'Per one million', value: result.data.casesPerOneMillion }]} />\r\n                    </Col>\r\n                    <Col>\r\n                        <DataCard header=\"Deaths\" data={[{ name: 'Today', value: result.data.todayDeaths }, { name: 'Total', value: result.data.deaths }, { name: 'Per one million', value: result.data.deathsPerOneMillion }]} />\r\n                    </Col>\r\n                    <Col>\r\n                        <DataCard header=\"Recovered\" data={[{ name: 'Today', value: result.data.todayRecovered }, { name: 'Total', value: result.data.recovered }, { name: 'Per one million', value: result.data.recoveredPerOneMillion }]} />\r\n                    </Col>\r\n                </Row>\r\n            </>\r\n                \r\n            }\r\n            \r\n        </>\r\n    );\r\n}","const { useState, useMemo } = require(\"react\");\r\n\r\nexport const useSortableData = (items, config = null) => {\r\n    const [sortConfig, setSortConfig] = useState(config);\r\n\r\n    const sortedItems = useMemo(() => {\r\n        let sortableItems = [...items];\r\n        if (sortConfig !== null) {\r\n            sortableItems.sort((a, b) => {\r\n                if (a[sortConfig.key] < b[sortConfig.key]) {\r\n                    return sortConfig.direction === 'ascending' ? -1 : 1;\r\n                }\r\n                if (a[sortConfig.key] > b[sortConfig.key]) {\r\n                    return sortConfig.direction === 'ascending' ? 1 : -1;\r\n                }\r\n                return 0;\r\n            });\r\n        }\r\n        return sortableItems;\r\n    }, [items, sortConfig]);\r\n\r\n    const requestSort = key => {\r\n        let direction = 'descending';\r\n        if (sortConfig && sortConfig.key === key && sortConfig.direction === 'descending') {\r\n            direction = 'ascending';\r\n        }\r\n        setSortConfig({ key, direction });\r\n    }\r\n\r\n    return { items: sortedItems, requestSort };\r\n}","import React from 'react';\r\nimport { Table } from 'react-bootstrap';\r\nimport { humanizeNumber } from '../../Helpers/humanizeNumber.helper';\r\nimport { useSortableData } from '../../Hooks/useSortableData.hook';\r\nimport styles from './../Shared/DataTable.module.css'\r\n\r\nexport function ContinentsDataTable(props) {\r\n    const { items, requestSort } = useSortableData(props.data);\r\n\r\n    return (\r\n        <>\r\n            <Table striped bordered hover className={styles.datatable}>\r\n                <thead>\r\n                    <tr>\r\n                        <th onClick={() => requestSort('continent')}>Name</th>\r\n                        <th onClick={() => requestSort('cases')}>Cases</th>\r\n                        <th onClick={() => requestSort('deaths')}>Deaths</th>\r\n                        <th onClick={() => requestSort('recovered')}>Recovered</th>\r\n                        <th onClick={() => requestSort('active')}>Active</th>\r\n                        <th onClick={() => requestSort('critical')}>Critical</th>\r\n                        <th onClick={() => requestSort('tests')}>Tests</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {items && items.map((element, idx) => (\r\n                        <tr key={idx} onClick={() => props.handleClick(element)}>\r\n                            <td>{element.continent}</td>\r\n                            <td>{humanizeNumber(element.cases)}</td>\r\n                            <td>{humanizeNumber(element.deaths)}</td>\r\n                            <td>{humanizeNumber(element.recovered)}</td>\r\n                            <td>{humanizeNumber(element.active)}</td>\r\n                            <td>{humanizeNumber(element.critical)}</td>\r\n                            <td>{humanizeNumber(element.tests)}</td>\r\n                        </tr>\r\n                    ))}\r\n                </tbody>\r\n            </Table>\r\n        </>\r\n    );\r\n}","import React from 'react';\r\nimport { useAsync } from 'react-async-hook';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { getContinentsData } from '../../../app/api/api';\r\nimport { ContinentsDataTable } from './ContinentsDataTable.component';\r\n\r\nexport function ContinentsData() {\r\n    const history = useHistory();\r\n    const { result, error, loading } = useAsync(getContinentsData, []);\r\n\r\n    function moveToDetails(element) {\r\n        if (element.continent === '') return;\r\n            history.push(history.location.pathname + '/' + encodeURIComponent(element.continent));\r\n    }\r\n\r\n    if (!result) {\r\n        return <></>\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {loading && <p>Loading...</p>}\r\n            {error && alert(error.message)}\r\n            {result &&\r\n                <>\r\n                    <ContinentsDataTable data={result.data} handleClick={moveToDetails} />\r\n                </>\r\n            }\r\n        </>\r\n    );\r\n}","import React from 'react';\r\nimport { Route, Switch } from 'react-router-dom';\r\nimport { ContinentData } from '../../components/CovidData/Continents/Continent/ContinentData.component';\r\nimport { ContinentsData } from '../../components/CovidData/Continents/ContinentsData.component';\r\n\r\nexport default function ContinentsRouter() {\r\n    return (\r\n        <Switch>\r\n            <Route exact path='/data/continents' component={ContinentsData} />\r\n            <Route path='/data/continents/:name' component={ContinentData} />\r\n        </Switch>\r\n    );\r\n}","import React from 'react';\r\nimport { Table } from 'react-bootstrap';\r\nimport { humanizeNumber } from '../../Helpers/humanizeNumber.helper';\r\nimport { useSortableData } from '../../Hooks/useSortableData.hook';\r\nimport styles from './../Shared/DataTable.module.css'\r\n\r\nexport function CountriesDataTable(props) {\r\n    const { items, requestSort  } = useSortableData(props.data);\r\n\r\n    return (\r\n        <>\r\n            <Table striped bordered hover className={styles.datatable}>\r\n                <thead>\r\n                    <tr>\r\n                        <th>Flag</th>\r\n                        <th onClick={() => requestSort('country')}>Name</th>\r\n                        <th onClick={() => requestSort('cases')}>Cases</th>\r\n                        <th onClick={() => requestSort('deaths')}>Deaths</th>\r\n                        <th onClick={() => requestSort('recovered')}>Recovered</th>\r\n                        <th onClick={() => requestSort('active')}>Active</th>\r\n                        <th onClick={() => requestSort('critical')}>Critical</th>\r\n                        <th onClick={() => requestSort('tests')}>Tests</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {items && items.map((element, idx) => (\r\n                        <tr key={idx} onClick={() => props.handleClick(element)}>\r\n                            <td><img width={60} height={40} src={element.countryInfo.flag} alt=\"Country flag\"></img></td>\r\n                            <td>{element.country}</td>\r\n                            <td>{humanizeNumber(element.cases)}</td>\r\n                            <td>{humanizeNumber(element.deaths)}</td>\r\n                            <td>{humanizeNumber(element.recovered)}</td>\r\n                            <td>{humanizeNumber(element.active)}</td>\r\n                            <td>{humanizeNumber(element.critical)}</td>\r\n                            <td>{humanizeNumber(element.tests)}</td>\r\n                        </tr>\r\n                    ))}\r\n                </tbody>\r\n            </Table>\r\n        </>\r\n    );\r\n}","import React from 'react';\r\nimport { useAsync } from 'react-async-hook';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { getCountriesData } from '../../../app/api/api';\r\nimport { CountriesDataTable } from './CountriesDataTable.component';\r\n\r\nexport function CountriesData() {\r\n    const history = useHistory();\r\n    const { result, error, loading } = useAsync(getCountriesData, []);\r\n\r\n    function moveToDetails(element) {\r\n        if (element.country === '') return;\r\n            history.push(history.location.pathname + '/' + encodeURIComponent(element.country));\r\n    }\r\n\r\n    if (!result) {\r\n        return <></>\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {loading && <p>Loading...</p>}\r\n            {error && alert(error.message)}\r\n            {result &&\r\n                <>\r\n                    <CountriesDataTable data={result.data} handleClick={moveToDetails}></CountriesDataTable>\r\n                </> \r\n            }\r\n        </>\r\n    );\r\n}","import React from 'react';\r\nimport { useAsync } from 'react-async-hook';\r\nimport { Button, Col, Row } from 'react-bootstrap';\r\nimport { useHistory, useParams } from 'react-router-dom';\r\nimport { getCountryData } from '../../../../app/api/api';\r\nimport { DataCard } from '../../Shared/DataCard.component';\r\n \r\nexport function CountryData() {\r\n    const history = useHistory();\r\n    const id = useParams();\r\n\r\n    const { result, error, loading } = useAsync(getCountryData, [id.name]);\r\n\r\n    if (!result) {\r\n        return <></>\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {loading && <p>Loading...</p>}\r\n            {error && alert(error.message)}\r\n            {result && \r\n                <>\r\n                <Button variant=\"light\" onClick={() => history.goBack()}>Back</Button>\r\n                <Row>\r\n                    <Col>\r\n                        <DataCard header=\"Info\" data={[{ name: 'Name', value: result.data.country }, { name: 'Population', value: result.data.population, shouldNotHumanize: true }]} />\r\n                    </Col>\r\n                    <Col>\r\n                        <DataCard header=\"Now\" data={[{ name: 'Active', value: result.data.active }, { name: 'Critical', value: result.data.critical }]} />\r\n                    </Col>\r\n                </Row>\r\n\r\n                <Row>\r\n                    <Col>\r\n                        <DataCard header=\"Cases\" data={[{ name: 'Today', value: result.data.todayCases }, { name: 'Total', value: result.data.cases }, { name: 'Per one million', value: result.data.casesPerOneMillion }]} />\r\n                    </Col>\r\n                    <Col>\r\n                        <DataCard header=\"Deaths\" data={[{ name: 'Today', value: result.data.todayDeaths }, { name: 'Total', value: result.data.deaths }, { name: 'Per one million', value: result.data.deathsPerOneMillion }]} />\r\n                    </Col>\r\n                    <Col>\r\n                        <DataCard header=\"Recovered\" data={[{ name: 'Today', value: result.data.todayRecovered }, { name: 'Total', value: result.data.recovered }, { name: 'Per one million', value: result.data.recoveredPerOneMillion }]} />\r\n                    </Col>\r\n                </Row>\r\n                </>\r\n            }\r\n            \r\n        </>\r\n    );\r\n}","import React from 'react';\r\nimport { Route, Switch } from 'react-router-dom';\r\nimport { CountriesData } from '../../components/CovidData/Countries/CountriesData.component';\r\nimport { CountryData } from '../../components/CovidData/Countries/Country/CountryData.component';\r\n\r\nexport default function CountriesRouter() {\r\n    return (\r\n        <Switch>\r\n            <Route exact path='/data/countries' component={CountriesData} />\r\n            <Route path='/data/countries/:name' component={CountryData} />\r\n        </Switch>\r\n    );\r\n}","import React from 'react';\r\nimport { Route, Switch } from 'react-router-dom';\r\nimport { WorldData } from '../../components/CovidData/World/WorldData.component';\r\nimport ContinentsRouter from './Continents.router';\r\nimport CountriesRouter from './Countries.router';\r\n\r\nexport default function DataRouter() {\r\n    return(\r\n        <Switch>\r\n            <Route path='/data/world' component={WorldData}/>\r\n            <Route path='/data/countries' component={CountriesRouter}/>\r\n            <Route path='/data/continents' component={ContinentsRouter}/>\r\n        </Switch>\r\n      );\r\n}   ","import React from 'react';\r\nimport { Route, Switch } from 'react-router-dom';\r\nimport DataRouter from './Data.router';\r\n\r\nexport default function MainRouter() {\r\n    return(\r\n        <main>\r\n            <Switch>\r\n                <Route path=\"/data\" component={DataRouter} />\r\n            </Switch>\r\n        </main>\r\n      );\r\n}","import React from 'react';\r\nimport { Nav, Navbar } from 'react-bootstrap';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport function NavBar() {\r\n    return (\r\n        <>\r\n            <Navbar bg=\"light\" expand=\"lg\" sticky=\"top\">\r\n                <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n                <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                    <Nav className=\"mr-auto\">\r\n                        <Link className=\"nav-link\" to=\"/data/world\">World data</Link>\r\n                        <Link className=\"nav-link\" to=\"/data/countries\">Countries data</Link>\r\n                        <Link className=\"nav-link\" to=\"/data/continents\">Continents data</Link>\r\n                    </Nav>\r\n                </Navbar.Collapse>\r\n            </Navbar>\r\n        </>\r\n    );\r\n}","import React from 'react';\nimport { Container } from 'react-bootstrap';\nimport MainRouter from './app/routing/Main.router';\nimport { NavBar } from './components/NavBar/NavBar.component';\n\nfunction App() {\n\n  return (\n    <Container>\n      <NavBar></NavBar>\n      <hr></hr>\n      <MainRouter></MainRouter>\n    </Container>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n  <React.StrictMode>\n      <BrowserRouter>\n        <App />\n      </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}